### YamlMime:Course
title: 实施持续集成
metadata:
  title: '课程 AZ-400T02-A: 实施持续集成'
  description: '课程 AZ-400T02-A: 实施持续集成'
uid: course.az-400t02
courseNumber: 'AZ-400T02-A'
hoursToComplete: 24
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 解释为什么持续集成很重要
- skill: 使用Azure DevOps实现持续集成
- skill: 配置版本和可用选项
- skill: 创建自动构建工作流程
- skill: 将其他构建工具与Azure DevOps集成
- skill: 创建混合构建过程
- skill: 描述什么是代码质量以及如何对其进行度量
- skill: 检测代码异味
- skill: 集成自动化测试以提高代码质量
- skill: 报告测试期间的代码覆盖率
- skill: 添加工具以衡量技术债
- skill: 检测开源和其他许可问题
- skill: 实施容器构建策略
learningPartnersLink: https://www.microsoft.com/learning/partners.aspx
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本课程提供知识和技能，以实现持续集成的DevOps实践。学生将学习如何在Azure DevOps管道中实施持续集成，如何管理代码质量和安全性原则以及如何实施容器构建策略。
  #### 受众概况
  本课程的学生对DevOps持续集成过程或通过Microsoft Azure DevOps Solutions认证考试感兴趣。
prerequisitesSection: |-
  - 学生应具有有关Azure，版本控制，敏捷软件开发和核心软件开发原理的基础知识。拥有在软件供应组织的工作经验会很有帮助。
  - 建议您具有在IDE中工作的经验，以及有关Azure门户的一些知识。但是，可能没有这些技术的技术背景，但对DevOps的实践随着文化的转变而感到好奇的学生，无论如何都应能够遵循程序和说明性的持续集成说明。
outlineSection: |-
  ### 模块 1&#58; 在Azure DevOps管道中实现持续集成
  在本单元中，将向您介绍持续集成原则，包括&#58;收益、挑战、建立最佳实践和实施步骤。您还将了解有关使用工作流、触发器、代理和工具实施构建策略的信息。
  #### 课程
  - 持续集成概述
  - 实施构建策略
  #### 实验 &#58; 启用与Azure管道的持续集成
  #### 实验 &#58; 创建Jenkins构建作业并触发CI
  完成本单元后，学生将&#58;
  - 能够解释为什么持续集成很重要
  - 使用Azure DevOps实现持续集成
  
  ### 模块 2&#58; 管理代码质量和安全策略
  在本模块中，您将学习如何管理代码质量，包括&#58;技术债，SonarCloud和其他工具解决方案。您还将学习如何使用开源，OWASP和WhiteSource Bolt管理安全策略。
  #### 课程
  - 管理代码质量
  - 管理安全策略

  #### 实验 室&#58; 使用Azure DevOps和SonarCloud管理技术债

  #### 实验 &#58; 使用WhiteSource Bolt和Azure DevOps检查漏洞
  学完本模块后，学生将能够&#58;
  - 管理代码质量，包括&#58;技术债SonarCloud和其他工具解决方案。
  - 使用开源，OWASP和WhiteSource Bolt管理安全策略。
  - 管理代码质量，包括&#58;技术债，SonarCloud和其他工具解决方案。


  ### 模块 3&#58; 实施容器构建策略
  在本模块中，您将学习如何实施容器策略，包括容器与虚拟机的区别以及微服务如何使用容器。您还将学习如何使用Docker实现容器。
  #### 课程
  - 实施容器建造策略


  #### 实验 &#58; 具有Azure和Docker映像的现有.NET应用程序
  学完本模块后，学生将能够&#58;
  - 实施容器策略，包括容器与虚拟机的区别以及微服务如何使用容器。
  - 使用Docker实现容器。

