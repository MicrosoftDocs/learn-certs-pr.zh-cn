### YamlMime:Course
title: Building web apps with Angular and TypeScript
metadata:
  title: 'Course 55266-A: Building web apps with Angular and TypeScript'
  description: 'Course 55266-A: Building web apps with Angular and TypeScript'
uid: course.55266
courseNumber: '55266-A'
hoursToComplete: 72
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 使用 TypeScript 设置和编写应用程序。
- skill: 创建和管理 Angular 应用程序。
- skill: 使用数据绑定来更新您的页面。
- skill: 将复杂界面分割为不同组件。
- skill: 编制它们自己的指令和管道。
- skill: 创建含验证的复杂表单。
- skill: 与 REST 后端通信
- skill: 编写含客户端路由的单页应用程序。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
summary: |-
  最近几年，大量的努力已被投入到使 HTML 和 JavaScript 成为网页应用程序而非仅仅网页内容更好的地方。使用 Angular，您可以利用这些新的、现代的概念将其提升到更高的层次。通过使用组件化的尝试，Angular 配备的比以往任何时候都好以创建高效的数据驱动型网页应用程序。Angular 负责数据绑定、导航和服务器通信；TypeScript 让您使用 JavaScript 在任何浏览器上都必须提供的最先进的功能。如强大的输入功能让您的应用程序更加的可维护、获得更好的结构且更加灵活。该课程将会持续更新到 Angular 的最新版本，当前版本是 Angular 6。享受 Google Angular 和 Microsoft TypeScript 的完美协同。

  #### 受众概览
  该课程的目标受众是正在寻找尽快启动进入 Angular 和 TypeScript 领域的网页开发人员。该课程的参与者需要具有对 JavaScript、HTML 和 CSS 及对 node.js 和 npm 概念的良好理解。
prerequisitesSection: |-
  参加此课程之前，学生必须&#58;
  - 对 JavaScript 具有良好的理解。
  - 对 HTML 和 CSS 具有基础的理解。
  - 至少拥有 node.js 和 npm 的概念。
  网页开发的 IDE 如 Visual Studio Code 或 WebStorm。
outlineSection: |-
  ### 模块 1&#58; Angular 介绍
  在此模块中，您将理解 Angular 的各个方面及为什么其在现代的网页开发中如此重要。
  #### 课程
  - 网页应用程序的发展进程
  - Angular Core 和模块
  - TypeScript、Dart、简单的旧版 JavaScript

  完成此模块后，学生将能够&#58;
  - 拥有对现代网页 UI 技术和它们在现代开发中所扮演的角色。


  ### 模块 2&#58; 拥有 TypeScript 的强类型 JavaScript
  让我们面对它吧&#58; JavaScript 的设计从来都不是针对大型应用程序的。很多架构都顺从于复杂的代码如界面，而强类型却是完全缺席的。很多最新且酷的 JS 功能都没有实施于目前的浏览器中。TypeScript 是两种问题的解决方案；让您能够编写
  现代、应用级的JavaScript。
  #### 课程
  - 编写应用级 JavaScript
  - 使用 TypeScript 型别安全的 JavaScript 开发
  - 实施型别、类和继承
  - 命名空间和模块


  #### 实验室 &#58; 玩具店
  - 以 TypeScript 项目开始
  - 制作模块&#58; 产品、类、订单
  - 创建购物车
  - 使用外部库
  - 向 HTML 页面添加代码

  完成此模块后，学生将能够&#58;
  - 获得对 TypeScript 好处的理解
  - 使用 TypeScript 的核心功能
  - 创建新 TypeScript 项目
  - 编译和运行 TypeScript 项目


  ### 模块 3&#58; 核心概念
  在此模块中，您将熟悉用于任何 Angular 应用程序最重要的构建模块。
  这是所有后续章节的基础。
  #### 课程
  - 组件
  - 模块
  - 服务
  - 工具


  #### 实验室 &#58; 检查首个项目
  - 打开一个正在运行的项目
  - 应用程序的元素
  - 加载模块
  - tsconfig.json

  完成此模块后，学生将能够&#58;
  - 理解组件和服务的目的。
  - 将元素和服务归类到模块中。
  使用 Angular 工具。

  ### 模块 4&#58; 数据绑定
  数据绑定能让您在编写 JavaScript 代码时忘记 HTML。它能让您将数据注入视图而无需在两者之间创建强依赖关系。这将会生成更加灵活、可测试且可维护的代码。
  #### 课程
  - 绑定的重要性
  - 组件视图
  - 结构性指令
  - 本地模版变量
  - 值转换
  - 视图组件


  #### 实验室 &#58; 有数据绑定的任务管理器
  - 模块
  - 显示任务列
  - 样式
  - 添加任务

  完成此模块后，学生将能够&#58;
  - 使用数据绑定创建和更新视图。
  - 在组件中处理用户互动。
  - 参考有本地模版变量的元素。
  - 为值转换使用管道。


  ### 模块 5&#58; 组件
  在此模块中，我们将更加深入地学习组件。您将会学习如何创建组件的层次结构及如何在其之间进行通信。
  #### 课程
  - 使用多个组件
  - 输入和输出
  - ViewChild 和 ContentChild
  - EventEmitter
  - 指令生命周期


  #### 实验室 &#58; 任务管理器&#58; 使用多个组件
  - 添加一些样式
  - TaskCreator 组件
  - TaskCard 组件
  - TaskList 组件
  - 应用程序组件
  - 注册组件

  完成此模块后，学生将能够&#58;
  - 将复杂组件分割为多个组件
  - 设置父子通信
  - 使用各种不同生命周期的钩子


  ### 模块 6&#58; 属性型指令
  如果您想向一个现有的元素添加自定义行为该怎么办？在该模块中，您将探索现有的指令如 NgClasses 和 NgStyle；并且学习如何创建您自己的指令。
  #### 课程
  - 属性型指令是什么？
  - 内置属性型指令
  - 自定义属性型指令

  完成此模块后，学生将能够&#58;
  - 理解属性型指令的作用。
  - 使用内置属性型指令。
  创建您自己的属性型指令。

  ### 模块 7&#58; 结构型指令
  使用结构型指令您可以在您的 HTML 中修改流。如，您是如何基于自己的数据而不将 HTML 写入您的 JavaScript 来动态生成 HTML？
  #### 课程
  - 结构型指令是什么？
  - 内置结构型指令
  - 模版
  - 自定义结构型指令

  完成此模块后，学生将能够&#58;
  - 理解结构型指令的作用。
  - 使用内置结构型指令。
  - 创建您自己的结构型指令。


  ### 模块 8&#58; Dependency Injection 和 Providers
  Dependency Injection (DI) 是将两个强耦合对象捕获并将其分离的艺术。这会帮助您编写可理解、可维护且可测试的代码。这并不是 Angular 中的一个选择也非&#58;您必须要做的。Angular 有基于 Providers 的一整套机制来支持 DI，您将在此模块中探索。
  #### 课程
  - 术语
  - Dependency Injection 基础
  - 服务
  - 供应商
  - 工厂
  - 注入令牌


  #### 实验室 &#58; 创建任务服务
  - 实施服务
  - 提供服务
  - 更新 AppComponent
  - 使用真实服务替换模拟服务

  完成此模块后，学生将能够&#58;
  - 创建自己的服务。
  - 在 Angular 中使用各种不同的供应商。
  - 将服务注入到组件和其他服务中。


  ### 模块 9&#58; 管道
  管道是一种在视图中对值做出微小改动的方便方式。这包括数据的格式化和过滤。管道的使用和可能性扩展很简单。
  #### 课程
  - 使用管道
  - 内置管道
  - 自定义管道
  - 纯与不纯


  #### 实验室 &#58; 温度管道
  - 在 Kelvin、Celsius 和 Farenheit 中创建显示温度的管道
  - 使用您新创建的管道

  完成此模块后，学生将能够&#58;
  - 使用内置管道。
  - 创建自己的管道。
  - 理解纯管道的重要性。


  ### 模块 10&#58; 使用表单
  表单对于任何应用程序都是非常重要的，它能让管理数据。您需要做更多而不仅仅是数据绑定。您需要验证、自动格式化、对数据变化做出响应等。Angular 提供了两种不同的方法来处理这个问题&#58; 即模版驱动型表单和模型驱动型表单。 此模块将探索上述两类表单。
  #### 课程
  - 表单中有什么
  - 变化响应
  - 表单生成器
  - 数据验证


  #### 实验室 &#58; 任务编辑器表单
  - TaskEditor组件
  - 基本的验证
  - 多个验证器
  - 自定义验证器

  完成此模块后，学生将能够&#58;
  - 在模版驱动型表单和模型驱动型表单之间选择。
  - 创建表单并提交信息。
  - 添加验证和视觉反馈。


  ### 模块 11&#58; 与服务器通信
  此模块将教您如何恢复并将数据发送到您的后端。我们将聚焦 REST 并使用 RxJS's Observables 来完成任务。
  #### 课程
  - 发送和接收数据
  - HTTPClient 模块
  - HTTP 拦截器
  - Observables 与 Promises 对比


  #### 实验室 &#58; 使用 Observables
  - 使用可观察对象更新组件


  #### 实验室 &#58; 与服务器通信
  - 提供 HttpClient 模块
  - 实施 HTTP 服务

  完成此模块后，学生将能够&#58;
  - 使用 HttpClient 自作 REST调用。
  - 处理有可观察对象的结果。


  ### 模块 12&#58; 创建单页应用程序
  不用一页一页地跳动，您可以将您的网站设计成单页应用程序。这将使您的网站感觉和执行起来更像是一个应用程序。SPA 有很多优势，但通常很难实施。该模块将教授 Angular 中可用的结构体来创建 SPA。
  #### 课程
  - SPA 是什么
  - 路由器模块
  - 路由配置
  - 父子导航
  - 路由保护


  #### 实验室 &#58; 创建 SPA&#58; Rabbit Rescue
  - 使用组件和模版替换静态 HTML
  - 为每个功能区设置路由
  - 关联功能区和根区

  完成此模块后，学生将能够&#58;
  - 创建单页应用程序。
  - 创建功能区。
  - 为每个功能建立路由。
  - 使用保护拦截导航。

  #### 补充阅读
  无