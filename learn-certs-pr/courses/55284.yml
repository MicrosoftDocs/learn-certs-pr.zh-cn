### YamlMime:Course
title: Introduction to Python
metadata:
  title: 'Course 55284-A: Introduction to Python'
  description: 'Course 55284-A: Introduction to Python'
uid: course.55284
courseNumber: '55284-A'
hoursToComplete: 96
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 理解 Python 如何运行及其适用于什么。
- skill: 理解 Python 在编程语言领域中的地位。
- skill: 在 Python 中工作及熟练操作字符串。
- skill: 使用 Python 执行数学运算。
- skill: 使用 Python 序列：列表、数组、字典和集合。
- skill: 收集用户的输入和输出结果。
- skill: 在 Python 中执行流程进程。
- skill: 使用 Python 从文件中读取和写入。
- skill: 在 Python 中写入功能。
- skill: 处理 Python 中的异常。
- skill: 在 Python 中使用日期和时间。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- beginner
roles:
- developer
summary: |-
  在此为期4天的 Python 培训课程中，学生将学习在 Python 中进行编程。该课程针对在其他编程语言方面有或者没有经验且对该语言不熟悉的学生。
  该 Python 课程使用 Python 3 进行教学；但是， Python 2 和 Python 3 之间的不同之处也会被指出。对于 Python 私人班级，我们的讲师会具体专注于 Python 2，如学生希望的话。

  #### 受众概览
  该课程旨在针对希望学习 Python 的学生。一些编程的经验是有帮助但不是必须的。
prerequisitesSection: |-
  一些编程的经验是有帮助但不是必须的。
outlineSection: |-
  ### 模块 1&#58; Python 基础
  Python， 首次出现于1991年，是已使用中最流行的编程语言。Python 是一种高级的编程语言，意味着它使用了相对人类可阅读的语法，由 Python 解释器翻译为您的计算机能够理解的语言。 其他流行的高级编程语言有 C#、Objective-C、Java、PHP 和 JavaScript。有趣的是，所有这些其他编程语言都不像 Python 那样，使用 C 语言的语法。如果您使用这些语言中的一种或多种，您可能会发现 Python 的语法有些奇怪。但是，如果花一点时间。您会发现它是对程序员非常友好的。

  #### 课程
  - 运行 Python
  - 你好，世界！
  - 常量
  - Python 注释
  - 变量
  - 编写 Python 模块
  - 打印() 功能
  - 收集用户输入
  - 获得帮助


  #### 实验室 &#58; 该课程中的练习
  - 你好，世界
  - 探索数据类型
  - 简单的 Python 脚本

  完成此模块后，学生将能够&#58;
  - 理解 Python如何工作。
  - 理解 Python 在编程语言领域中的地位。
  - 理解 Python 3.x 和 Python 2.x 之间的不同之处。
  - 理解变量和 Python 的数据类型。
  - 新建简单的模块。
  - 在 Python 上获得帮助


  ### 模块 2&#58; 函数和模块
  该模块解释了如何使用函数和模块。
  #### 课程
  - 定义功能
  - 作用域
  - 全局变量
  - 函数参数
  - 返回值
  - 导入模块


  #### 实验室 &#58; 本课练习
  - 有参数的函数
  - 有默认值的参数

  完成此模块后，学生将能够&#58;
  - 定义和调用函数。
  - 定义在站位参数到函数中的参数。
  - 为参数设定默认值。
  - 理解作用域。
  - 从函数返回值。
  - 新建和导入模块。


  ### 模块 3&#58; 运算
  Python 包含内置数学函数和一些额外的提供扩展的数学（和相关的）函数的内置的库。在此课程中，我们将涵盖内置函数和运算及随机库。

  #### 课程
  - 算数运算符
  - 赋值运算符
  - 内置数学函数
  - 数学模块
  - 随机模块


  #### 实验室 &#58; 本课练习
  - 整除和取模函数
  - 几个披萨够我们吃

  完成此模块后，学生将能够&#58;
  - 在 Python 中做基础数学
  - 为其他的数学运算使用数学模块。
  - 使用随机模块生成随机数字。


  ### 模块 4&#58; Python 字符串
  Python 包含内置数学函数和一些额外的提供扩展的数学（和相关的）函数的内置的库。在此课程中，我们将涵盖内置函数和运算及随机库。

  #### 课程
  - 引号和特殊符号
  - 字符串索引
  - 切片字符串
  - 串联和重复
  - 常见的字符串方法
  - 字符串格式化
  - 格式化字符串常量（f-字符串） 
  - 内置字符串函数


  #### 实验室 &#58; 本课练习
  - 索引字符串
  - 其诶按字符串
  - 重复
  - 执行格式化
  - 熟悉 f-字符串
  - 输出制表符分隔的文本

  完成此模块后，学生将能够&#58;
  - 使用字符串。
  - 转义特殊字符
  - 使用多行字符串。
  - 索引和切片字符串。
  - 使用常见的字符串运算符和方法。
  - 设置字符串格式。
  - 使用内置字符串函数


  ### 模块 5&#58; 常量&#58; 序列、字典和集合
  常量是一种可以一次返回它的一个成员的对象。我们在此课程中将要介绍的常量是列表、元组、范围、字典和集合。

  #### 课程
  - 定义
  - 序列
  - 解压序列
  - 字典
  - len() 函数
  - 集合
  - *args 和 **kwargs


  #### 实验室 &#58; 本课练习
  - 删除并返回随机元素
  - 简单的石头、剪刀、布游戏
  - 切片序列
  - 从用户输入中新建字典

  完成此模块后，学生将能够&#58;
  - 理解 Python 中可用的不同类型常量
  - 创建、修改和使用列表。
  - 创建并使用类型。
  - 创建范围。
  - 创建、修改和使用字典
  - 创建集合并使用集合移除列表中的重复项
  - 理解 *args 和 **kwargs参数。


  ### 模块 6&#58; 流程控制
  通常，程序是逐行按照顺序运行。我们已经知道我们可以通过调用函数来改变这种流程。也可以使用条件语句和循环来改变流程。

  #### 课程
  - 条件语句
  - Python 中的循环
  - 跳出和继续
  - enumerate() 函数
  - 生成器
  - 列表生成式


  #### 实验室 &#58; 本课练习
  - 所有元素为真和任意元素为真
  - 彩瓷游戏
  - 找针游戏
  - 掷骰子

  完成此模块后，学生将能够&#58;
  - 在 Python 中使用如果条件语句。
  - 在 Python 中使用循环。
  - 创建生成器函数
  - 使用列表生成式


  ### 模块 7&#58; 虚拟环境
  虚拟环境是 Python 开发平台在您电脑上的一个容器。 安装包可以安装到与您标准的或非虚拟环境的虚拟环境中。

  #### 课程
  - 虚拟环境


  #### 实验室 &#58; 本课练习
  - 使用虚拟环境

  完成此模块后，学生将能够&#58;
  - 理解虚拟环境是什么。
  - 创建虚拟环境。
  - 激活和取消激活虚拟环境。
  - 删除虚拟环境。


  ### 模块 8&#58; 正则表达式
  正则表达式在很多编程语言中包括 Java、PHP、JavaScript、C、C++ 和 Perl 被用来做模式匹配。我们将简要介绍正则表达式，然后向您展示如何在 Python 中使用它们。

  #### 课程
  - 正则表达式语法
  - Python 处理正则表达式的方式

  完成此模块后，学生将能够&#58;
  - 为模式匹配创建正则表达式。
  - 在 Python 中使用正则表达式。


  ### 模块 9&#58; Unicode 编码和编码方式
  该模块解释了如何使用 Unicode 编码和编码方式。
  #### 课程
  - Bits（位元）与 Bytes（位元组）
  - 十六进制数
  - 编码


  #### 实验室 &#58; 本课练习
  - 在数字系统中转换数字类型
  - 查找易混淆字符

  完成此模块后，学生将能够&#58;
  - 理解二进制数和十六进制数。
  - 在数字系统中转换数字类型。


  ### 模块 10&#58; 文件处理
  Python 让您能够在操作系统上访问和修改文件和目录。

  除此以外，您还可以&#58;
  1.打开新的活现有文件并将其存储在文件对象变量中。
  2.一次性全部或逐行读取文件内容。
  3.向文件内容进行追加操作。
  4.覆盖文件内容。
  5.列出目录内容。
  6.重命名文件和目录。

  #### 课程
  - 打开文件
  - os 和 os.path 模块


  #### 实验室 &#58; 本课练习
  - 在文件中找到文本
  - 向文件写入
  - 列表生成器

  完成此模块后，学生将能够&#58;
  - 在操作系统中读取文件。
  - 在操作系统中创建和写入文件。
  - 在操作系统中访问和使用目录。
  - 使用 os 和 os.path模块。


  ### 模块 11&#58; 异常处理
  该模块解释了如何在 Python 中处理异常。
  #### 课程
  - 通配符异常子句
  - 获得异常信息
  - else 子句
  - finally 子句
  - 为流程控制使用异常
  - 引发您自己的异常
  - 异常层次结构


  #### 实验室 &#58; 本课练习
  - 引发异常
  - 求和运算

  完成此模块后，学生将能够&#58;
  - 处理中 Python 的异常。


  ### 模块 12&#58; Python 日期和时间
  该模块解释了如何使用 Python日期和时间。
  #### 课程
  - 理解时间
  - 时间模块
  - 日期模块


  #### 实验室 &#58; 本课练习
  - 出站时间报告

  完成此模块后，学生将能够&#58;
  - 使用时间模块。
  - 使用日期时间模块。


  ### 模块 13&#58; 从命令行运行 Python 脚本
  该模块解释了如何从命令行运行 Python 脚本。
  #### 课程
  - sys.arg
  - sys.path


  #### 实验室 &#58; 本课练习
  - 使用 Windows Easy Transfer 迁移设置
  - 配置 Windows 7 的参考图像
  - 配置参考图像

  完成此模块后，学生将能够&#58;
  - 从命令行运行 Python 脚本。

  #### 补充阅读
  无