### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 规划共享目标和时间表的转换计划
- skill: 选择项目并确定项目指标和关键绩效指标 (KPI's)
- skill: 创建团队和敏捷的组织结构
- skill: 设计工具集成策略
- skill: 设计许可证管理策略（例如 Azure DevOps 和 GitHub 用户）
- skill: 设计从工作项目到工作软件的端到端可追溯性策略
- skill: 设计身份验证和访问策略
- skill: 设计集成本地和 cloud 资源的策略
- skill: 描述使用源控制的好处
- skill: 描述 Azure Repos 和 GitHub
- skill: 从 TFVC 迁移到 Git
- skill: 管理代码质量，包括技术负债 SonarCloud 和其他工具解决方案
- skill: 建立关于代码质量的组织知识
- skill: 说明如何构造 Git repos 
- skill: 描述 Git 分支工作流程
- skill: 利用 pull 请求进行协作和代码评审
- skill: 利用 Git 钩子实现自动化
- skill: 使用 Git 培养整个组织的内部资源
- skill: 说明 Azure Pipelines 及其组件的作用
- skill: 配置代理以在 Azure Pipelines 中使用
- skill: 说明为什么持续集成很重要
- skill: 使用 Azure Pipelines 实现持续集成
- skill: 定义现场可靠性工程
- skill: 设计流程以衡量最终用户满意度并分析用户反馈
- skill: 设计流程以自动化应用程序分析
- skill: 管理警报并减少无意义和不可操作的警报
- skill: 进行无懈可击的回顾，创造公正的文化
- skill: 为发布渠道和应用程序基础设施定义基础设施和配置策略以及适当的工具集
- skill: 在应用程序基础设施中实现合规性和安全性
- skill: 描述集成开源软件的潜在挑战
- skill: 检查开源软件包的安全性和许可合规性
- skill: 管理组织安全和合规政策
- skill: 将许可证和漏洞扫描集成到构建和部署管道中
- skill: 配置构建管道以访问包的安全性和许可等级
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本课程提供设计和实施 DevOps 流程和最佳做法的知识和技能。学生将学习如何规划 DevOps、使用源控件、为企业扩充 Git、合并工件、设计相依性管理策略、管理密码、实施持续整合、实施容器组建策略、设计发行策略、设定发行管理工作流程、实施部署模式并优化回馈机制。

  #### 受众概况
  本课程的学生有兴趣设计和实施 DevOps 过程或通过 Microsoft Azure DevOps Solutions 认证考试。
prerequisitesSection: |-
  成功的学习者将具备以下知识并了解&#58;
  - Cloud 计算概念，包括对PaaS、SaaS 和 IaaS 实施的了解。
  -无论是 Azure 管理还是 Azure 开发，都至少在其中一个领域拥有成熟的专业技能。
  - 版本控制、Agile 软件开发和核心软件开发原则。在一个提供软件的组织中有经验是很有帮助的。
  
  如果您是 Azure 和 cloud 计算的新手，请考虑以下资源之一&#58;
  - 免费在线&#58; Azure Fundamentals (https://docs.microsoft.com/en-us/learn/paths/azure-fundamentals/) 
  - 讲师指导的课程&#58; AZ-900&#58; Azure Fundamentals (https://docs.microsoft.com/en-us/learn/certifications/courses/az-900t01)
  
  如果您是 Azure Administration 的新手，请考虑使用&#58;
  - 免费在线&#58; Azure Administrators 的先决条件 (https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/)
  - 讲师指导的课程&#58; AZ-104&#58; Microsoft Azure Administrator (https://docs.microsoft.com/en-us/learn/certifications/courses/az-104t00) 和 AZ-010: Azure Administration for AWS SysOps (https://docs.microsoft.com/en-us/learn/certifications/courses/az-010t00)
  
  如果您是 Azure Developer 的新手，请考虑使用&#58;
  - 免费在线&#58; 创建无服务器应用程序(https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/)
  - 讲师指导的课程&#58; AZ-204&#58; Developing Solutions for Microsoft Azure (https://docs.microsoft.com/en-us/learn/certifications/courses/az-204t00) 和 AZ-020: Microsoft Azure Solutions for AWS Developers (https://docs.microsoft.com/en-us/learn/certifications/courses/az-020t00)
outlineSection: |-
  ### 模块 1&#58; 规划 DevOps
  #### 课程
  - 转换规划
  - 专案选择
  - 团队结构
  - 迁移到 Azure DevOps

  #### 实验&#58; 使用 Azure Boards 进行敏捷规划和组织者

  完成本模块后，学员将能够&#58;
  - 计划有共同目标和时间表的转型
  - 选择项目并确定项目指标和关键绩效指标 (KPI's)
  - 创建团队和敏捷的组织结构
  - 设计工具集成策略
  - 设计许可证管理策略（例如，Azure DevOps 和 GitHub 用户）
  - 设计从工作项目到工作软件的端到端可追溯性策略
  - 设计身份验证和访问策略
  - 设计集成本地和 cloud 资源的策略
  
  
  ### 模块 2&#58; 源控制入门
  #### 课程
  - 什么是源控制
  - 源控制的好处
  - 源控制系统的类型
  - Azure Repos 简介
  - GitHub 简介
  - 从 Team Foundation Version Control (TFVC) 迁移到 Azure Repos 中的 Git
  
  ####  实验室&#58; Azure Repos 中的 Git 版本控制
  
  完成本模块后，学员将能够&#58;
  - 描述使用源控制的好处
  - 描述 Azure Repos 和 GitHub
  - 从 TFVC 迁移到 Git
  
  
  ### 模块 3&#58; 管理技术负债
  #### 课程
  - 识别技术负债
  - 团队内的知识共享
  - 具有 Codespaces 的现代化开发环境
  
  #### 实验室 &#58; 使用 Azure Project Wikis 共享团队知识
  
  完成本模块后，学员将能够&#58;
  - 管理代码质量，包括技术负债 SonarCloud 和其他工具解决方案
  - 建立关于代码质量的组织知识
  
  
  ### 模块 4&#58; 使用 Git 进行企业 DevOps
  #### 课程
  - 如何构建您的 Git Repo
  - Git 分支工作流程
  - 与 Azure Repos 中的 Pull 请求协作
  - 为什么关心 Git Hooks
  - 培养内部来源
  - 管理 Git 存储库
  
  #### 实验室 &#58; 在 Azure Repos 中使用 Git 进行版本控制
  
  完成本模块后，学员将能够&#58;
  - 说明如何构建 Git repos 
  - 描述 Git 分支工作流程
  - 利用 pull 请求进行协作和代码评审 
  - 利用 Git 钩实现自动化
  - 使用 Git 培养整个组织的内部资源
  
  
  ### 模块 5&#58; 配置 Azure Pipelines
  #### 课程
  - DevOps 中的管道概念
  - Azure Pipelines
  - 评估托管代理与自托管代理的使用情况
  - 代理池
  - 管道和并发
  - Azure DevOps 和开源项目（公共项目）
  - Azure Pipelines YAML 与 Visual Designer
  
  #### 实验室 &#58; 配置代理池和了解管道样式
  
  完成本模块后，学员将能够&#58;
  - 说明 Azure Pipelines 管道及其组件的作用
  - 配置代理以在 Azure Pipelines 中使用
  
  
  ### 模块 6&#58; 使用 Azure Pipelines 实现持续集成
  #### 课程
  - 持续集成概述
  - 实施构建策略
  - 与 Azure Pipelines 集成
  - 将外部源控制与 Azure Pipelines 集成
  - 设置自托管代理
  
  #### 实验室 &#58; 支持与 Azure Pipelines 的持续集成
  
  #### 实验室 &#58; 将外部源控制与 Azure Pipelines 集成
  
  完成本模块后，学员将能够&#58;
  - 说明为什么持续集成很重要
  - 使用 Azure Pipelines 实现持续集成
  
  
  ### 模块 7&#58; 管理应用程序配置和机密
  #### 课程
  - 安全概论
  - 实施安全的开发过程
  - 重新思考应用程序配置数据
  - 管理机密、令牌和证书
  - 与身份管理系统集成
  - 实现应用程序配置
  
  #### 实验室 &#58; 将 Azure Key Vault 与 Azure DevOps 集成
  
  完成本模块后，学员将能够&#58;
  - 管理应用程序配置和机密
  - 将 Azure Key Vault 与管道集成
  
  
  ### 模块 8&#58; 实现与 GitHub 操作的持续集成
  #### 课程
  - GitHub 操作
  - 与 GitHub 操作的持续集成
  - 确保 GitHub 操作的机密性
  
  #### 实验室 &#58; GitHub 操作持续集成
  
  完成本模块后，学员将能够&#58;
  - 创建并使用 GitHub 操作和工作流程
  - 实现与 GitHub 操作的持续集成
  
  
  ### 模块 9&#58; 设计和实现依赖管理策略
  #### 课程
  - 打包依赖项
  - 包管理
  - 迁移和整合工件
  - 包安全
  - 实施版本控制策略
  
  #### 实验室 &#58; 使用 Azure Artifacts 进行包管理
  
  完成本模块后，学员将能够&#58;
  - 推荐工件管理工具和实践
  - 提取公共包以实现共享和重用
  - 迁移和整合工件
  - 迁移和整合源控制措施
  
  
  ### 模块 10&#58; 设计发布策略
  #### 课程
  - 连续交付简介
  - 发布策略建议
  - 构建高质量发布管道
  - 选择合适的发布管理工具
  
  #### 实验室 &#58; 使用发布门控制部署
  
  #### 实验室 &#58; 创建发布仪表板
  
  完成本模块后，学员将能够&#58;
  - 区分发布和部署
  - 定义发布管道的组件
  - 说明设计发布策略时需要考虑的事项
  - 将发布与发布过程进行分类，并概述如何控制二者的质量
  - 描述发布门的原理以及如何处理发布说明和文档
  - 选择发布管理工具

  ### 模块 11&#58; 使用 Azure Pipelines 实现连续部署
  #### 课程
  - 创建发布管道
  - 提供和配置环境
  - 管理和模块化任务和模板
  - 配置自动集成和功能测试自动化
  - 自动化运行状况检查
  
  #### 实验室 &#58; 使用 YAML 将管道配置为代码
  
  #### 实验室 &#58; 设置和运行功能测试
  
  完成本模块后，学员将能够&#58;
  - 说明 Azure DevOps 和其他发布管理工具中使用的术语
  - 描述构建和发布任务是什么，它可以做什么以及一些可用的部署任务
  - 说明为什么有时需要在一个发布管道中执行多个发布作业
  - 区分多代理和多配置发布作业
  - 在发布管道中使用发布变量和阶段变量
  - 使用服务连接安全地部署到环境
  - 列出通过使用警报、服务挂钩和报告检查管道运行状况和发布的不同方法
  
  
  ### 模块 12&#58; 实现适当的部署模式
  #### 课程
  - 部署模式简介
  - 实施蓝绿部署
  - 功能切换
  - 金丝雀发布
  - 暗发布
  - AB 测试
  - 渐进式曝光部署
  
  #### 实验室 &#58; 使用 LaunchDarkly 和 Azure DevOps 进行特性标志管理
  
  完成本模块后，学员将能够&#58;
  - 描述部署模式
  - 实施蓝绿部署
  - 实施金丝雀发布
  - 实施渐进式曝光部署
  
  
  ### 模块 13&#58; 使用 Azure 工具管理基础设施和配置
  #### 课程
  - 作为代码和配置管理的基础设施
  - 使用 ARM 模板创建 Azure 资源 
  - 使用 Azure CLI 创建 Azure 资源 
  - 使用 DevOps 实现 Azure 自动化
  - 所需状态配置 (DSC)
  
  #### 实验室 &#58; 使用 Resource Manager Templates 的 Azure 部署
  
  完成本模块后，学员将能够&#58;
  - 将基础设施和配置应用为代码原则。
  - 使用 Microsoft 自动化技术（如 ARM 模板、 PowerShell 和 Azure CLI）部署和管理基础设施
  
  
  ### 模块 14&#58; 作为 Azure 可用代码工具的第三方基础设施
  #### 课程
  - Chef
  - Puppet
  - Ansible
  - Terraform
  
  #### 实验室 &#58; 使用 Terraform 和 Azure Pipelines 在 Cloud 中自动化基础设施部署
  
  #### 实验室 &#58; 在 Azure 上使用 Chef 部署应用程序
  
  #### 实验室 &#58; 在 Azure 上使用 Puppet 部署应用程序
  
  #### 实验室 &#58;  Azure 中的 Ansible
  
  完成本模块后，学员将能够&#58;
  - 在 Azure 中使用第三方工具和服务（如Chef、Puppet、Ansible和Terraform）部署和配置基础设施
  
  
  ### 模块 15&#58; 使用 Docker 管理容器
  #### 课程
  - 实施容器构建策略
  - 实现 Docker 多阶段构建
  
  #### 实验室 &#58; 使用 Azure 更新现有的 ASP.NET
  
  完成本模块后，学员将能够&#58;
  - 实现容器策略，包括容器与虚拟机的区别以及微服务如何使用容器
  - 使用 Docker 实现容器
  - 实施 Docker 多阶段构建
  
  
  ### 模块 16&#58; 创建和管理 Kubernetes 服务基础设施
  #### 课程
  - Azure Kubernetes Service
  - Kubernetes 工具
  - 将 AKS 与 Pipelines 集成
  
  #### 实验室 &#58; 将多容器应用程序部署到 Azure Kubernetes Service
  
  完成本模块后，学员将能够&#58;
  - 部署和配置托管 Kubernetes 群集
  
  
  ### 模块 17&#58; 为开发团队实施反馈
  #### 课程
  - 实现跟踪系统使用情况、功能使用情况和流程的工具
  - 实现移动应用程序崩溃报告数据的路由
  - 开发监控和状态仪表板
  - 集成和配置票务系统
  
  #### 实验室 &#58; 使用 Application Insights 监控应用程序性能
  
  完成本模块后，学员将能够&#58;
  - 实现跟踪系统使用情况、功能使用情况和流程的工具
  - 为客户端应用程序配置崩溃报告集成
  - 实现客户端应用程序崩溃报告数据的路由
  - 开发监控和状态仪表板
  - 将票务系统与开发团队的工作管理集成并进行配置
  
  
  ### 模块 18&#58; 实施系统反馈机制
  #### 课程
  - 站点可靠性工程
  - 设计衡量最终用户满意度的实践
  - 设计捕获和分析用户反馈的流程
  - 设计流程以自动化应用程序分析
  - 管理警报
  - 进行无懈可击的回顾，创造公正的文化
  
  #### 实验室 &#58; Integration between Azure DevOps and Teams
  
  完成本模块后，学员将能够&#58;
  - 定义站点可靠性工程
  - 设计衡量最终用户满意度并分析用户反馈的流程
  - 设计流程以自动化应用程序分析
  - 管理警报并减少无意义和不可操作的警报
  - 进行无懈可击的回顾，创造公正的文化
  
  
  ### 模块 19&#58; 在 DevOps 项目中实现安全性
  #### 课程
  - 管道安全
  - Azure Security Center
  
  #### 实验室 &#58; 在 Azure DevOps Pipeline 中实现安全性和合规性
  
  完成本模块后，学员将能够&#58;
  - 为发布管道和应用程序基础设施定义基础设施和配置策略以及适当的工具集
  - 在应用程序基础设施中实现合规性和安全性
  

  ### 模块 20&#58; 验证代码库的合规性
  #### 课程
  - 开源软件
  - 管理安全性和合规性策略
  - 集成许可证和漏洞扫描
  
  #### 实验室 &#58; 使用 SonarQube 和 Azure DevOps 管理技术负债 
  
  完成本模块后，学员将能够&#58;
  - 描述集成开源软件的潜在挑战
  - 检查开源软件包的安全性和许可证合规性
  - 管理组织安全性和合规性策略
  - 将许可证和漏洞扫描集成到构建和部署管道中
  - 配置构建管道以访问包安全性和许可等级